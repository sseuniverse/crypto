name: Release

on:
  # push:
  #   tags:
  #     - "v*"
  workflow_dispatch:
    inputs:
      version:
        # Often minor versions require human intervention, so it's safer if we
        # force ourselves to always create them locally
        description: ⚠️ This workflow can only automatically release patch versions, or SSE Crypto pre-releases
        required: true
        default: patch
        type: choice
        options:
          - patch
          - breaking-prerelease

permissions:
  contents: read

jobs:
  check-release-type:
    name: Check the release type
    runs-on: ubuntu-latest
    outputs:
      is-breaking-prerelease: >-
        ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version == 'breaking-prerelease' }}
    steps:
      - name: Log
        run: |
          echo "Is breaking prerelease dispatch? ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version == 'breaking-prerelease' }}"

  log-updates:
    name: Log packages to publish
    runs-on: ubuntu-latest
    needs: check-release-type
    if: needs.check-release-type.outputs.is-breaking-prerelease == 'false'
    steps:
      - name: Checkout the new tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: This release will publish the following packages
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            npx release-tool version --dry patch
          else
            git diff --name-only HEAD^..HEAD
          fi;

  git-version:
    permissions:
      contents: write # for Git to git push
    name: Create git tag and commit
    runs-on: ubuntu-latest
    needs: check-release-type
    if: github.event_name == 'workflow_dispatch'
    outputs:
      branch: ${{ steps.branch-name.outputs.branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set committer
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create new version
        if: needs.check-release-type.outputs.is-breaking-prerelease == 'false'
        run: |
          make new-version-checklist
          npx release-tool version --yes patch

      - name: Create new version (breaking prerelease)
        if: needs.check-release-type.outputs.is-breaking-prerelease == 'true'
        run: |
          make new-breaking-prerelease-version

      # - name: Compute temporary branch name
      #   id: branch-name
      #   run: |
      #     branch="release/temp/$(git describe --abbrev=0)"
      #     echo $branch
      #     echo "branch=$branch" >> $GITHUB_OUTPUT

      - name: Push to GitHub
        run: |
          git push "https://${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git" HEAD:"${{ steps.branch-name.outputs.branch }}" --follow-tags

  # npm-release:
  #   name: Build, Test and Publish
  #   runs-on: ubuntu-latest
  #   needs:
  #     - check-release-type
  #     - git-version
  #   environment: npm
  #   if: |
  #     always() &&
  #     (needs.git-version.result == 'success' || needs.git-version.result == 'skipped') &&
  #     needs.check-release-type.result == 'success'
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Checkout the temporary branch
  #       if: needs.git-version.result == 'success'
  #       run: git checkout ${{ needs.git-version.outputs.branch }}

  #     - name: Set committer
  #       run: |
  #         git config user.name "${{ github.actor }}"
  #         git config user.email "${{ github.actor }}@users.noreply.github.com"

  #     - name: Bump package versions (breaking prerelease)
  #       if: needs.check-release-type.outputs.is-breaking-prerelease == 'true'
  #       run: |
  #         make new-breaking-prerelease-version-create-commit-ci
  #         YARN_ENABLE_IMMUTABLE_INSTALLS=false yarn

  #     - name: Build and Test
  #       run: make prepublish
  #       env:
  #         FORCE_COLOR: true
  #         BREAKING_PRERELEASE: ${{ needs.check-release-type.outputs.is-breaking-prerelease == 'true' || '' }}

  #     - name: Publish to npm
  #       run: npx release-tool publish --yes
  #       if: needs.check-release-type.outputs.is-breaking-prerelease == 'false'
  #       env:
  #         YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  #     - name: Publish to npm (breaking prerelease)
  #       run: npx release-tool publish --yes --tag next --tag-version-prefix tmp.v
  #       if: needs.check-release-type.outputs.is-breaking-prerelease == 'true'
  #       env:
  #         YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #         BREAKING_PRERELEASE: true

  github-release:
    name: Create Github Release
    runs-on: ubuntu-latest
    needs:
      - check-release-type
      - git-version
    if: |
      always() &&
      (needs.git-version.result == 'success' || needs.git-version.result == 'skipped') &&
      needs.check-release-type.result == 'success'
    outputs:
      is-main: ${{ steps.is-main.outputs.result == 1 }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      version: ${{ steps.tags.outputs.new }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if releasing from main
        id: is-main
        uses: actions/branch-matches@v2
        with:
          name: main

      - name: Checkout the temporary branch
        if: needs.git-version.result == 'success'
        run: git checkout ${{ needs.git-version.outputs.branch }}

      - name: Get tag info
        id: tags
        uses: actions/get-release-tags@v2
        with:
          prefix: ${{ needs.check-release-type.outputs.is-breaking-prerelease == 'true' && 'v-breaking' || 'v' }}

      - name: Generate the changelog
        id: changelog
        uses: actions/generate-changelog@v2
        with:
          from: ${{ steps.tags.outputs.old }}
          to: ${{ steps.tags.outputs.new }}
          filter: ${{ needs.check-release-type.outputs.is-breaking-prerelease == 'true' && 'v-breaking' || 'v' }}
        env:
          GITHUB_AUTH: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a draft GitHub release
        uses: actions/publish-github-release@v2
        with:
          tag: ${{ steps.tags.outputs.new }}
          changelog: ${{ steps.changelog.outputs.changelog }}
          token: ${{ secrets.BOT_TOKEN }}

  github-push:
    permissions:
      contents: write # for Git to git push
    name: Push release commit to "main"
    runs-on: ubuntu-latest
    needs:
      # - npm-release
      - github-release
      - git-version
      - check-release-type
    if: |
      always() &&
      needs.github-release.result == 'success' &&
      needs.github-release.outputs.is-main
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Checkout the temporary branch
        if: needs.git-version.result == 'success'
        run: git checkout ${{ needs.git-version.outputs.branch }}

      - name: Update CHANGELOG.md
        uses: actions/update-changelog@v2
        with:
          changelog: ${{ needs.github-release.outputs.changelog }}
          filename: CHANGELOG.md

      - name: Commit CHANGELOG.md
        run: |
          git add CHANGELOG.md
          git -c user.name="${{ github.actor }}" -c user.email="${{ github.actor }}@users.noreply.github.com" \
            commit -m "Add ${{ needs.github-release.outputs.version }} to CHANGELOG.md [skip ci]" --no-verify --quiet

      - name: Push to GitHub
        run: |
          git push "https://${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git" HEAD:main --follow-tags

      - name: Delete temporary branch from GitHub
        if: needs.git-version.result == 'success'
        run: git push "https://${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git" :${{ needs.git-version.outputs.branch }}

  types-docs-updates:
    name: Update package docs
    runs-on: ubuntu-latest
    needs:
      - check-release-type
      - github-release
      - github-push
    if: |
      always() &&
      needs.check-release-type.outputs.is-breaking-prerelease == 'false' &&
      needs.github-push.result == 'success' &&
      needs.github-release.result == 'success' &&
      needs.github-release.outputs.is-main
    steps:
      - uses: actions/checkout@v4
        with:
          repository: sseuniverse/crypto
          fetch-depth: 0
          persist-credentials: false
      - name: Download package docs
        uses: actions/download-artifact@v4
        with:
          name: package-docs
          path: docs
      - name: Commit website changes
        id: prepare-website-changes
        run: |
          if [[ -z "$(git status --porcelain=v1 2>/dev/null)" ]]
          then
            echo "No package docs changes."
            exit 0
          else
            echo "hasChanges=true" >> $GITHUB_OUTPUT
          fi
          git checkout -b update-docs
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git commit -am "docs: update package docs"
          git push --force "https://${{ secrets.GITHUB_TOKEN }}@github.com/sseuniverse/crypto.git" update-docs
      - name: Create Pull Request
        uses: actions/create-pull-request@v2
        if: steps.prepare-website-changes.outputs.hasChanges == 'true'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: sseuniverse/crypto
          branch: update-docs
          base: main
          title: Update package docs
          description: Updated package docs for [Version ${{ needs.github-release.outputs.version }}](https://github.com/${GITHUB_REPOSITORY}/releases/tag/${{ needs.github-release.outputs.version }}).
          labels: |
            docs
            repo automation :robot:
